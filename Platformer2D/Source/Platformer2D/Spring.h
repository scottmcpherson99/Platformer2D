// Fill out your copyright notice in the Description page of Project Settings.

#pragma once

#include "CoreMinimal.h"
#include "Interactable.h"
#include "Spring.generated.h"

/**
 * 
 */
UCLASS()
class PLATFORMER2D_API ASpring : public AInteractable
{
	GENERATED_BODY()
	
public:
	ASpring();

protected:
	///////////////////////////////////////////////////////////////////////////////////////////////////////////
	// <ASpring>
	// Called when the game starts or when spawned
	virtual void BeginPlay();

	// Called every frame
	virtual void Tick(float DeltaTime) override;
	// </ASpring>
	///////////////////////////////////////////////////////////////////////////////////////////////////////////
	 
	///////////////////////////////////////////////////////////////////////////////////////////////////////////
	// <Components>
		/** Sprite component */
	UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = SpriteComponent, meta = (AllowPrivateAccess = "true"))
		class UPaperSpriteComponent* usedSpriteComponent;
	// </Components>
	///////////////////////////////////////////////////////////////////////////////////////////////////////////


	///////////////////////////////////////////////////////////////////////////////////////////////////////////
	// <Collision>
	UFUNCTION()
		void OnTriggerBoxOverlap(UPrimitiveComponent* OverlappedComponent, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const FHitResult& SweepResult);

	//checks to see if any actors have exited the collision box
	UFUNCTION()
		void OnComponentEndOverlap(UPrimitiveComponent* OverlappedComponent, AActor* OtherActor, UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	// </Collision>
	///////////////////////////////////////////////////////////////////////////////////////////////////////////


	///////////////////////////////////////////////////////////////////////////////////////////////////////////
	// <Audio>
	//sound for player jumping
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Audio")
		class USoundBase* bounceSound;
	// </Audio>
	///////////////////////////////////////////////////////////////////////////////////////////////////////////

	
	///////////////////////////////////////////////////////////////////////////////////////////////////////////
	// <Animation>
	FTimerHandle animationTimer;

	void ResetAnimation();
	// </Animation>
	///////////////////////////////////////////////////////////////////////////////////////////////////////////
};