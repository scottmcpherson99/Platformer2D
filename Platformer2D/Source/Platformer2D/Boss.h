// Fill out your copyright notice in the Description page of Project Settings.

#pragma once

#include "CoreMinimal.h"
#include "EnemyBase.h"
#include "Boss.generated.h"

/**
 * 
 */

UENUM(BlueprintType)
enum class EBossAIState : uint8
{
	EATTACKPLAYER UMETA(DisplayName = "AttackPlayer"),
	EWANDER UMETA(DisplayName = "Wander"),
	ESTATIONARY UMETA(DisplayName = "Stationary")
};

UCLASS()
class PLATFORMER2D_API ABoss : public AEnemyBase
{
	GENERATED_BODY()
	
public:
	ABoss();

	///////////////////////////////////////////////////////////////////////////////////////////////////////////
	// <GettersandSetters>
	// Update the value of the boss' health
	void SetHealth(float health_);

	// Output the boss' current health
	const float GetHealth() const;

	// Update the value of the boss' max health
	void SetMaxHealth(float maxHealth_);

	// Output the boss' max health
	const float GetMaxHealth() const;
	// </GettersandSetters>
	///////////////////////////////////////////////////////////////////////////////////////////////////////////


	///////////////////////////////////////////////////////////////////////////////////////////////////////////
	// <Bullet to spawn>
	UPROPERTY(EditAnywhere, Category = "Type of bullet to spawn")
		TSubclassOf<class ABulletDrop> bulletToSpawn;
	// </Bullet to spawn>
	///////////////////////////////////////////////////////////////////////////////////////////////////////////

protected:
	///////////////////////////////////////////////////////////////////////////////////////////////////////////
	// <AFlyingEnemySpawner>
	virtual void BeginPlay() override;

	// Called every frame
	virtual void Tick(float DeltaTime) override;
	// </AFlyingEnemySpawner>
	///////////////////////////////////////////////////////////////////////////////////////////////////////////



	///////////////////////////////////////////////////////////////////////////////////////////////////////////
	// <StateMachine>
	void SwitchState(EBossAIState newState_);

	void StartStateMachine();

	//timer to start the state machine
	FTimerHandle startStateTimer;
	// </StateMachine>
	///////////////////////////////////////////////////////////////////////////////////////////////////////////


	///////////////////////////////////////////////////////////////////////////////////////////////////////////
	// <Movement>
	//timeline actor
	UPROPERTY(EditAnywhere, Category = "Timeline")
		UCurveFloat* BezierCurveFloat;

	FTimeline BezierCurveTimeline;

	UFUNCTION()
		void BezierTimelineProgress(float value);

	//perform tasks based on state
	void FindControlPoints();
	// </Movement>
	///////////////////////////////////////////////////////////////////////////////////////////////////////////


	///////////////////////////////////////////////////////////////////////////////////////////////////////////
	// <Widget>
	UPROPERTY(VisibleAnywhere)
		class UWidgetComponent* healthWidgetComp;
	// </Widget>
	///////////////////////////////////////////////////////////////////////////////////////////////////////////


	///////////////////////////////////////////////////////////////////////////////////////////////////////////
	// <SpawnEnemy>
	//spawn a bullet
	void SpawnBullet();

	//timer to spawn each enemy
	FTimerHandle bulletDropTimer;
	// </SpawnEnemy>
	///////////////////////////////////////////////////////////////////////////////////////////////////////////
	 
	
	///////////////////////////////////////////////////////////////////////////////////////////////////////////
	// <Attributes>
	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Spawn", Meta = (MakeEditWidget = true))
		FVector upperLeftBound;

	UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = "Spawn", Meta = (MakeEditWidget = true))
		FVector lowerRightBound;

	//current health
	float health;

	//max health
	float maxHealth = 120;
	// </Attributes>
	///////////////////////////////////////////////////////////////////////////////////////////////////////////


private:
	///////////////////////////////////////////////////////////////////////////////////////////////////////////
	// <Attributes>
	FVector ControlPoints[3];

	// the current state the AI is in
	EBossAIState currentState;

	// the number of loops the AI should do in the state
	int numberOfLoopsInState;
	// </Attributes>
	///////////////////////////////////////////////////////////////////////////////////////////////////////////
};